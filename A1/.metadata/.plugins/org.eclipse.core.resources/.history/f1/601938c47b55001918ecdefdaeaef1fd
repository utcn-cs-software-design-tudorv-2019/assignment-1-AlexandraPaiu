package Data;

import java.sql.Statement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

import DBA.Conexiune;

public class StudentRepository {

		private static Connection con;
		private Statement sts;
		protected static final Logger LOGGER = Logger.getLogger(StudentRepository.class.getName());
		private static final String insertStatementString = "INSERT INTO student (groop,email,password,address,cnp,name)"
				+ " VALUES (?,?,?,?,?,?)";
		private final static String deleteStatementString ="DELETE FROM student where email = ?";
		
		
		public StudentRepository(Connection con){
			StudentRepository.con = con;
			try{sts = this.con.createStatement();}
			catch(Exception e){
				e.printStackTrace();
			}
		}
		
		public Student findbyMail(String email) {
			Student s= new Student();
			PreparedStatement findStatement = null;
			try {

				String y = "SELECT * FROM student where email = '" + email + "' ;";
				 ResultSet rs = sts.executeQuery(y);
				
				if (rs.next()) {
					s = new Student(rs.getString("name"),rs.getString("email"),rs.getString("password"),rs.getString("address"),rs.getString("cnp"), rs.getInt("groop"));
					s.setId(rs.getInt("idStudent"));
				}
			} catch (SQLException e) {
				LOGGER.log(Level.WARNING, "StudentRepository:findbyMail " + e.getMessage());
			} finally {
				Conexiune.close(findStatement);
			}
			return s;
		}
		
		public void insert(Student student) 
		{
			PreparedStatement insertStatement = null;
			int insertedId = -1;
			try {
				
				insertStatement = con.prepareStatement(insertStatementString, Statement.RETURN_GENERATED_KEYS);
				insertStatement.setInt(1, student.getGroup());
				insertStatement.setString(2, student.getEmail());
				insertStatement.setString(3, student.getPassword());
				insertStatement.setString(4, student.getAddress());
				insertStatement.setString(5, student.getCnp());
				insertStatement.setString(6, student.getName());
				insertStatement.executeUpdate();


				ResultSet rs = insertStatement.getGeneratedKeys();
				
				
				if (rs.next()) {
					insertedId = rs.getInt(1);
				}
				
			} catch (SQLException e) {
				LOGGER.log(Level.WARNING, "StudentRepository:insert " + e.getMessage());
			} finally {
				Conexiune.close(insertStatement);
			}
		}
		
		public ArrayList<Student> show() throws SQLException{
			String y = "SELECT * FROM student";
			 ResultSet rs = sts.executeQuery(y);
			
			 ArrayList<Student> as = new ArrayList<Student>();
			 
			if (rs.next()) {
				Student s = new Student(rs.getString("name"),rs.getString("email"),rs.getString("password"),rs.getString("cnp"),rs.getString("address"), rs.getInt("groop"));
				s.setId(rs.getInt("idStudent"));
				as.add(s);
			}
			
			return as;
		}


		
		public void updates(Student old,String name,String address, String cnp, String group ) {
			PreparedStatement findStatement = null;
			try {
				String y = "Update student SET address = ? , name = ?, cnp = ?, groop = ? where email = ?";
				findStatement = con.prepareStatement(y, Statement.RETURN_GENERATED_KEYS);
				
				int g = Integer.parseInt(group);
				findStatement.setString(1,address);
				findStatement.setString(2,name);
				findStatement.setString(3,cnp);
				findStatement.setInt(4,g);
				findStatement.setString(5,old.getEmail());
				findStatement.executeUpdate();
				
			} catch (SQLException e) {
				LOGGER.log(Level.WARNING, "StudentRepository:updates " + e.getMessage());
			} finally {
				Conexiune.close(findStatement);
			}
		}
		public void delete(String id) 
		{
			PreparedStatement deleteStatement = null;
			int insertedId = -1;
			try {	
				deleteStatement = con.prepareStatement(deleteStatementString, Statement.RETURN_GENERATED_KEYS);
				deleteStatement.setString(1, id);
				deleteStatement.executeUpdate();

				ResultSet rs = deleteStatement.getGeneratedKeys();
				
				
				if (rs.next()) {
					insertedId = rs.getInt(1);}
				
			} catch (SQLException e) {
				LOGGER.log(Level.WARNING, "StudentRepository:delete " + e.getMessage());
			} finally {
				Conexiune.close(deleteStatement);
			}
		}
		
	

	
}
